
### 单例设计模式

`定义： 保证一个类只有一个实例，并提供一个访问它的全局访问点`

> explain: 什么情况下我们只需要一个对象呢，比如线程池，全局缓存，或者是登录的浮窗只需创建一次等等。

#### 1、一般实现方式
```
var Singleton = function(name) {
  this.name = name
  this.istance = null
}
Singleton.getInstance = function(name) {
  if(!this.Singleton) {
     this.istance = new Singleton(name)
  }
  return this.istance
}
var a = Singleton.getInstance('single 1')
var b = Singleton.getInstance('single 2')

console.log(a === b) // ture
```
`缺点：` Singleton 这个类 `不够透明` ，使用者不加说明的话不知道这个是一个单例类，有可能通过 new xxx 的方式
来获取对象，而不是 Singleton.getInstance 方式去获取单例；而且这个类不符合 `单一职责原则` ，因为这个类内部做了
两件事，一个创建对象，而是初始化对象且保证只有一个对象。
